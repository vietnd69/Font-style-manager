---
description: 
globs: 
alwaysApply: true
---
# Font Style Manager for Figma

## Project Structure

### ui-src
- React-based UI components for interactive interfaces
- Core modules: ChoiceFont, EditShowGroup, EditShowType, ChoiceVariable, BuyMeACoffee,...
- Use figma UI theme, and css variables import from figma
- Built with React, TypeScript and CSS modules
- Uses Vite for bundling and development

### widget-src
- Implements Figma Widget API and Plugin API
- Core files: code.tsx, TextDesignSystemManager.tsx, TextDesignSystemList.tsx
- Uses custom JSX factory (`figma.widget.h` and `figma.widget.Fragment`)
- Manages widget state through `useSyncedState` hooks

## Communication Pattern
- Widget displays UI via `figma.showUI(__html__)`
- Widget sends data to UI using `figma.ui.postMessage({ moduleName, data })`
- UI sends messages to widget with `parent.postMessage({ pluginMessage: msg }, "*")`
- Message types and structure defined in `msgType` interface
- Widget listens for UI messages with `figma.ui.onmessage`

## Project Libraries

### External Dependencies
- React and React DOM for UI components
- TypeScript for type-safe development
- CSS modules for styling
- Vite for UI bundling
- Webpack for plugin/widget bundling
- ESLint with @figma/figma-plugins/recommended configuration

### Internal Libraries
- Font utilities for font management and manipulation
- Style utilities for creating and managing text styles
- Variable utilities for Figma variable integration
- Message handlers for plugin-UI communication

## Figma Types Integration
- Utilizes native Figma API types: Font, FontName, LineHeight, LetterSpacing, TextStyle
- Extends with custom types:
  - `textStyleType`: Text style definition with font properties and metadata
  - `cleanFontType`: Simplified font type for easier manipulation
  - `ShowType`: Display options for typography details
  - `CustomVariable`: Custom variable definition for typography

## Documentation

### Plugin API Documentation
- Figma Plugin API: https://www.figma.com/plugin-docs/
- Widget API: https://www.figma.com/widget-docs/
- API Typings: @figma/plugin-typings package

### Development Guidelines
- Use TypeScript for type safety with `strict: true` in tsconfig.json
- Follow Figma's plugin linting rules with @figma/figma-plugins/recommended
- Structure project with separate directories for UI and widget code
- Bundle code using Webpack for plugins/widgets and Vite for UI
- Test across various Figma document contexts before publishing

### Performance Considerations
- Load resources only when needed
- Consider memory usage when working with large documents
- Use bundling to minimize plugin size
- Handle edge cases (missing fonts, component instances, etc.)
- Implement error handling for network requests

## Build Configuration
- `manifest.json` defines plugin parameters, API versions, and permissions
- `networkAccess` allows Google Fonts integration
- Configured for both Plugin API 1.0.0 and Widget API 1.0.0
- Uses `documentAccess: "dynamic-page"` for document access
- Build process uses separate TypeScript configurations for widget and UI 
